if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

lua <<EOF
require('usermod')
EOF


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLORS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set termguicolors
set laststatus=2 " show status bar on single window
set cursorline
set encoding=UTF-8
syntax on
let g:airline_theme='deus'
set background=dark
colorscheme material-theme
" Complement material-theme colors
hi Visual guifg=White guibg=LightBlue gui=none
hi MatchParen gui=bold guibg=none guifg=LightMagenta
highlight Comment cterm=italic gui=italic
set hlsearch " Highlight search matches
highlight Search ctermbg=black ctermfg=cyan term=bold cterm=bold

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CURSOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set timeoutlen=500 ttimeoutlen=0 " for esc delay

" Copy to clipboard requires clipboard provider. Try :CheckHealth
set clipboard+=unnamedplus

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text, tab and indent related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set backspace=2
" Use spaces instead of tabs
set expandtab
set smarttab
" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2
set softtabstop=2
set lbr
set colorcolumn=80

set number
set noerrorbells
set ruler
set scrolloff=3
set sidescrolloff=5
set confirm
set exrc

" Splits
set splitbelow
set splitright

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Google Java Format
augroup autoformat_settings
  au!
  autocmd FileType javascript,typescript,javascript.jsx,typescript.tsx AutoFormatBuffer prettier
augroup END

"Vim markdown list format
autocmd FileType markdown
    \ set formatoptions-=q |
    \ set formatlistpat=^\\s*\\d\\+\\.\\s\\+\\\|^\\s*\[-*+]\\s\\+
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent = 0
au BufRead,BufNewFile *.md setlocal textwidth=79

" Typescript/Javascript

"" set filetypes as typescript.tsx
autocmd BufNewFile,BufRead *.tsx, set filetype=typescript.tsx
autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx

"" dark red
hi tsxTagName guifg=#E06C75

"" orange
hi tsxCloseString guifg=#F99575
hi tsxCloseTag guifg=#F99575
hi tsxCloseTagName guifg=#F99575
hi tsxAttributeBraces guifg=#F99575
hi tsxEqual guifg=#F99575

"" yellow
hi tsxAttrib guifg=#F8BD7F cterm=italic

" Indent
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_enabled = 0

" Maximizer
let g:maximizer_set_default_mapping = 0
nnoremap <silent><C-w>z :MaximizerToggle!<CR>
let g:maximizer_set_mapping_with_bang = 1

" Notational
let g:nv_search_paths = ['~/dev/adn/notes']
let g:nv_use_short_pathnames = 1

"vim-better-whitespace
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0
let g:strip_whitelines_at_eof=1
let g:show_spaces_that_precede_tabs=1

" pgsql
let g:sql_type_default = 'pgsql'

" Git
"" Fugitive
command! -nargs=1 Browse silent exe '!open ' . "<args>"

nmap <Leader>gs :Git<CR>
nmap <Leader>gd :Gvdiffsplit<CR>
nmap <Leader>gl :0Gclog<CR>
nmap <Leader>gb :Git blame<CR>
nmap <Leader>gr :Gread<CR>
nmap <Leader>gw :Gwrite<CR>
nmap <Leader>gc :Git commit<CR>

"" GitGutter
let g:gitgutter_map_keys = 0
nmap ]c <Plug>(GitGutterNextHunk)
nmap [c <Plug>(GitGutterPrevHunk)
nmap <Leader>gg :GitGutterAll<CR>
nmap <Leader>ga <Plug>(GitGutterStageHunk)
nmap <Leader>gu <Plug>(GitGutterUndoHunk)
nmap <Leader>gp <Plug>(GitGutterPreviewHunk)
nmap <Leader>gm :Gdiff main <bar> let g:gitgutter_diff_base = main<CR>

set updatetime=100 " reduce the time to make signs appear

"" Search modified git files
nmap <Leader>gf <cmd>lua require('telescope.builtin').git_status()<cr>

" Current buffer symbols
nmap <Leader>tb :SymbolsOutline<CR>

" Gutentags
let g:gutentags_project_root = ['node_modules']
let g:gutentags_cache_dir = "~/.vim/tags/"

"" Needs to have installed and compiled
"" stack install gutenhasktags hasktags ghcid stylish-haskell hlint
let g:gutentags_project_info = [ {'type': 'haskell', 'file': 'Setup.hs'} ]
let g:gutentags_ctags_executable_haskell = 'gutenhasktags'

" Airline
let g:airline_powerline_fonts = 1

" Line numbers
let g:airline_section_z = '%3p%% %4l%#__accent_bold#/%L%{g:airline_symbols.maxlinenr}%#__restore__# %3v'
let g:airline#extensions#default#section_truncate_width = {
  \ 'b': 100,
  \ 'x': 100,
  \ 'y': 150,
  \ 'z': 45,
  \ 'warning': 80,
  \ 'error': 80,
  \ }

let g:airline#extensions#default#layout = [
    \ [ 'a', 'c' ],
    \ [ 'x', 'z', 'error', 'warning' ]
    \ ]

" NERDTree
nmap <Leader>e :NERDTreeToggle<CR>
noremap <Leader>E :NERDTreeFind<CR>
let NERDTreeIgnore=['\.pyc$', '__pycache__']
let NERDTreeWinSize=50

" Needed for trees-context floating win border
" https://github.com/neovim/neovim/issues/17996#issuecomment-1186208986
highlight FloatBorder guifg=#021316
" Syntax highlight
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {"go", "rust", "markdown", "lua", "vim", "elixir"},     -- one of "all", "language", or a list of languages
  highlight = {
    enable = true,              -- false will disable the whole extension
  },
}

require'treesitter-context'.setup { separator = '-' }
EOF
nmap <Leader>lh :write <bar> edit <bar> TSBufEnable highlight<CR>

" NERDCommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Disable mappings and add Toggle manually
let g:NERDCreateDefaultMappings = 0
map <leader>/ <plug>NERDCommenterToggle

" JSON FORMAT
nmap <Leader>j :%!python3 -m json.tool<CR>

" Vimtex
" `neovim-remote` implements the |--remote| used for feedback
let g:vimtex_latexmk_progname='~/.virtualenvs/neovim-remote/bin/nvr'

" vim-markdown
let g:vim_markdown_folding_disabled = 1

" search
set ignorecase
" Ack
if executable('rg')
  let g:ackprg = 'rg --vimgrep --no-heading'
endif

nnoremap <Leader>f <cmd>Telescope find_files<cr>
nnoremap <Leader>b <cmd>Telescope buffers<cr>
nnoremap <leader>lw <cmd>Telescope lsp_dynamic_workspace_symbols<cr>
nnoremap <leader>ls <cmd>Telescope lsp_document_symbols<cr>
nnoremap <leader>lr <cmd>Telescope lsp_references<cr>
nnoremap <leader>li <cmd>Telescope lsp_implementations<cr>
nnoremap <Leader>a <cmd>Telescope grep_string<cr>
nnoremap <Leader>s <cmd>Telescope live_grep<cr>
nnoremap <Leader>u <cmd>Telescope current_buffer_fuzzy_find<cr>
nnoremap <Leader>h <cmd>lua require('dash.providers.telescope').dash({ bang = false, initial_text = '' })<cr>
nnoremap z= <cmd>Telescope spell_suggest<cr>
nnoremap <Leader>c :History:<CR>
nnoremap <C-P> @:<CR>

" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --color "always" --line-number --no-heading --hidden --follow '. <q-args>, 1, <bang>0)

" make Rg ignore the filename
command! -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>),
  \   1,
  \   {'options': '--delimiter : --nth 2..'})

" vim-test
if filereadable("./gradlew")
    let test#java#runner = 'gradletest'
    let test#java#gradletest#executable = './gradlew test --info'
endif

let g:delve_new_command = 'tabnew'

function! DebugNearest()
  let g:test#go#runner = 'delve'
  TestNearest
  unlet g:test#go#runner
endfunction

command! -nargs=+ DlvTestRun call DlvTestRun(<f-args>)

function! DlvTestRun(...)
    call delve#dlvTest(a:1, "-- -test.v  -test.count=1 --test.run=" . a:2)
endfunction

nmap <leader>xn :TestNearest<CR>
nmap <leader>xf :TestFile<CR>
nmap <leader>xs :TestSuite<CR>
nmap <leader>xl :TestLast<CR>
nmap <leader>xv :TestVisit<CR>
nmap <leader>xg :call DebugNearest()<CR>
nmap <leader>xgb :DlvToggleBreakpoint<CR>
nmap <leader>xgc :DlvClearAll<CR>

" Python Isort
" let g:vim_isort_python_version = 'python3'

" Alchemist
let g:alchemist#elixir_erlang_src = '/Users/adonascimento/dev/third_party/elixir_erlang_src'
let g:alchemist_tag_disable = 1

" Mix-format
let g:mix_format_on_save = 1
let g:mix_format_silent_errors = 1

"" ghcid
au FileType haskell nnoremap <buffer> <Leader>h :Ghcid<CR>

" Golang
au FileType go nmap <Leader>se :GoDeclsDir<CR>
au FileType go nmap <Leader>si <Plug>(go-info)
au FileType go nmap <Leader>sm <Plug>(go-implements)
au FileType go nmap <leader>st <Plug>(go-test-func)
au FileType go nmap <leader>sy <Plug>(go-test)
au FileType go nmap <leader>sd <Plug>(go-doc)
au FileType go nmap <leader>sp <Plug>(go-channelpeers)
au FileType go nmap <leader>sc <Plug>(go-callers)

" nmap <leader>ic <Plug>VimspectorContinue
" nmap <leader>is <Plug>VimspectorStop
" nmap <leader>ir <Plug>VimspectorRestart
" nmap <leader>ip <Plug>VimspectorPause
" nmap <leader>ib <Plug>VimspectorToggleBreakpoint
" nmap <leader>iv <Plug>VimspectorToggleConditionalBreakpoint
" nmap <leader>if <Plug>VimspectorAddFunctionBreakpoint
" nmap <leader>io <Plug>VimspectorStepOver
" nmap <leader>ii <Plug>VimspectorStepInto
" nmap <leader>iu <Plug>VimspectorStepOut
" nmap <leader>it <Plug>VimspectorRunToCursor

" Mundo
nmap <leader>m :MundoToggle<CR>

let g:vimspector_enable_mappings = 'HUMAN'

function! DeleteHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction

nmap <leader>z :call DeleteHiddenBuffers()<CR>

function! CreateCenteredFloatingWindow()
    let width = float2nr(&columns * 0.6)
    let height = float2nr(&lines * 0.6)
    let top = ((&lines - height) / 2) - 1
    let left = (&columns - width) / 2
    let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

    let top = "╭" . repeat("─", width - 2) . "╮"
    let mid = "│" . repeat(" ", width - 2) . "│"
    let bot = "╰" . repeat("─", width - 2) . "╯"
    let lines = [top] + repeat([mid], height - 2) + [bot]
    let s:buf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
    call nvim_open_win(s:buf, v:true, opts)
    set winhl=Normal:Floating
    let opts.row += 1
    let opts.height -= 2
    let opts.col += 2
    let opts.width -= 4
    call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
    au BufWipeout <buffer> exe 'bw '.s:buf
endfunction

let g:peekaboo_window="call CreateCenteredFloatingWindow()"

let g:dash_map = { 'sql' : ['psql']  }
