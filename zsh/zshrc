export HOMEBREW_PREFIX=/opt/homebrew
export HOMEBREW_CELLAR=/opt/homebrew/Cellar
export HOMEBREW_REPOSITORY=/opt/homebrew
export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$HOME/.local/bin:$HOME/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin"

eval "$(navi widget zsh)"
eval "$(zoxide init zsh)"

# Needed to solve conflict with fzf and zsh-vi-mode with ctrl-r
ZVM_INIT_MODE=sourcing
fpath+=${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src
# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.oh-my-zsh"

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="adn"

# Case-sensitive completion.
CASE_SENSITIVE="true"

# Show correction on wrong commands
# ENABLE_CORRECTION="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Add wisely, as too many plugins slow down shell startup.
# The plugins zsh-autosuggestions zsh-syntax-highlighting zsh-vi-mode
# should be set last and in that order.
plugins=(docker asdf zsh-autosuggestions zsh-syntax-highlighting zsh-vi-mode)
ZSH_AUTOSUGGEST_USE_ASYNC=true

alias flushCache='sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder'
alias cat='bat'
alias sed=gsed

# Postgres
alias pg_start="brew services start postgresql@14"
alias pg_restart="brew services restart postgresql@14"
alias pg_stop="brew services stop postgresql@14"
alias pg_logs_tail="tail -f /opt/homebrew/var/postgresql@14/log/postgresql.csv"
alias pg_logs_cat="cat /opt/homebrew/var/postgresql@14/log/postgresql.csv"
alias psqlp="psql -U promscale -d promscale"
alias pgclip="pgcli -U promscale -d promscale"

# Git
alias git='/opt/homebrew/opt/git/bin/git' # Use git from brew
alias g='git'
alias gb='git branch --sort=-committerdate'
alias gbd='git branch -D'
alias ga='git add -A -v'
alias gau='git add -u -v'
alias gs='git status'
alias gpf='git push --force-with-lease'
alias gd='git diff'
alias gdc='git diff --cached'
alias gca='git commit --amend --no-edit -v'
alias gc='git commit'
alias gcf='git fixup'
alias gcm='git commit -m'
alias gch='git checkout'
alias gr='git restore'
alias gw='git switch'
alias gwc='gw -c'
alias gp='git push'
alias gpl='git pull'
alias gpu='git push --set-upstream origin $(git_current_branch)'
alias gl='git log --graph --color'
alias gfo='git fetch origin'
alias grom='gfo && git rebase origin/master'
alias gfu='git fetch upstream'
alias gri='git rebase -i'
alias grc='git rebase --continue'
alias gst='git stash'
alias gstp='git stash pop'
alias gstd='git stash drop'
alias gprl='git log --pretty=format:"### %s %n %n %b" --reverse origin/master..HEAD | pbcopy'
# Delete all the git branches except master
function git::clean () {
  git checkout master > /dev/null 2>&1
  for b in $(git branch) ; do
    if [[ "${b}" != '*' && "${b}" != "master" ]] ; then
      echo "Deleting ${b}"
      git branch -D $b
    fi
  done
}

# REVIEW_BASE is used by the aliases set in .gitconfig, by default
# is set to master. To review changes made by the last commit of this
# branch set it to:
# REVIEW_BASE=HEAD^ git stat
export REVIEW_BASE=master

# Kubernetes
alias k='kubectl'
source "/opt/homebrew/opt/kube-ps1/share/kube-ps1.sh"
alias k9s='k9s'
alias helm-delete-all="helm delete \$(helm list | awk  '{ print \$1 }' | tail -n +2)"
export PATH="${PATH}:${HOME}/.krew/bin"

# Use for git branch in theme
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git*' formats '%b'
precmd() {
    vcs_info
}

# vi mode timeout
export KEYTIMEOUT=1

# VIM
alias vim='nvim'
alias nv="vim ~/dev/adn/notes -c 'cd ~/dev/adn/notes' '+:NV'"
export EDITOR="nvim"
export GPG_TTY=$(tty)
export MANPAGER="nvim +Man\!"

# Fix Delete Home and End on vi-mode
bindkey -a "^[[3~" delete-char
bindkey "^[[3~" delete-char
bindkey -a "^[[H" beginning-of-line
bindkey "^[[H" beginning-of-line
bindkey -a "^[[F" end-of-line
bindkey "^[[F" end-of-line
bindkey "^K" kill-line
# On tmux the keycodes change
bindkey -a "^[[1~" beginning-of-line
bindkey "^[[1~" beginning-of-line
bindkey -a "^[[4~" end-of-line
bindkey "^[[4~" end-of-line
bindkey '^E' autosuggest-accept

if [[ "$(uname)" == "Linux" ]]
then
  # Beginning search with arrow keys
  bindkey "^[OA" up-line-or-beginning-search
  bindkey "^[OB" down-line-or-beginning-search
  bindkey -a "^[OA" up-line-or-beginning-search

  bindkey "^[b" backward-word
  bindkey "^[[1;5D" backward-word
  bindkey -a "^[[1;5D" backward-word
  bindkey "^[f" forward-word
  bindkey "^[[1;5C" forward-word
  bindkey -a "^[[1;5C" forward-word
fi

# add texlive to PATH
export PATH="/usr/local/texlive/2016/bin/x86_64-linux:$PATH"

# Elixir & Erlang
export ERL_AFLAGS="-kernel shell_history enabled"
export KERL_BUILD_PLT=yes

export AWS_PAGER=bat

# oh-my-zsh
source $ZSH/oh-my-zsh.sh
# oh-my-zsh defines an alias for ls so we override it here
alias ls='exa -bla --git'

# Disable the forward-char autosuggest
ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(end-of-line)
# Start new lines in insert mode
ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT

# asdf version manager for elm elixir erlang
# https://gist.github.com/rubencaro/6a28138a40e629b06470
if [ -e $HOME/.asdf/asdf.sh ] ; then
  export PATH="${HOME}/.asdf/installs/haskell/8.4.4/bin:${PATH}"
fi
# Haskell
# https://github.com/haskell/haskell-ide-engine/issues/1158
export HIE_HOOGLE_DATABASE=/Users/adonascimento/dev/third_party/haskell-ide-engine/.stack-work/hoogle/x86_64-osx/lts-13.10/8.6.3/database.hoo

# Go
export GOPATH="$HOME/go"
export PATH="$HOME/go/bin:$PATH"

export LANG=en_US.UTF-8

# ssh
export SSH_KEY_PATH="~/.ssh/id_rsa_adn"

# Rust
export PATH="$HOME/.cargo/bin:$PATH"

# FZF
# --files: Print each file that would be searched without actually performing the search.
# --no-ignore: Do not respect .gitignore, etc...
# --hidden: Search hidden files and folders
# --follow: Follow symlinks
# --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
export FZF_DEFAULT_COMMAND='fd --type file --follow --hidden --exclude .git'
source ${HOMEBREW_PREFIX}/opt/fzf/shell/completion.zsh
source ${HOMEBREW_PREFIX}/opt/fzf/shell/key-bindings.zsh

qq() {
  clear

  logpath="$TMPDIR/q"
  if [[ -z "$TMPDIR" ]]; then
    logpath="/tmp/q"
  fi

  if [[ ! -f "$logpath" ]]; then
    echo 'Q LOG' > "$logpath"
  fi

  tail -100f -- "$logpath"
}

rmqq() {
  logpath="$TMPDIR/q"
  if [[ -z "$TMPDIR" ]]; then
    logpath="/tmp/q"
  fi
  if [[ -f "$logpath" ]]; then
    rm "$logpath"
  fi
  qq
}

docker::cleanup(){
    docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
    docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

sshTS() {
  ssh -i "~/.ssh/alejandro-donascimento-ts.pem" ec2-user@$1
}

# Brew openssl
export PATH="/opt/homebrew/opt/openssl@3/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/openssl@3/lib"
export CPPFLAGS="-I/opt/homebrew/opt/openssl@3/include"
export PKG_CONFIG_PATH="/opt/homebrew/opt/openssl@3/lib/pkgconfig"
