export PATH="$HOME/.local/bin:$HOME/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin"

# FOR ANSIBLE DANGER
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.oh-my-zsh"

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="adn"

# Case-sensitive completion.
CASE_SENSITIVE="true"

# Show correction on wrong commands
# ENABLE_CORRECTION="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(vi-mode docker zsh-autosuggestions asdf)
ZSH_AUTOSUGGEST_USE_ASYNC=true

alias flushCache='sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder'

# Git
alias git='/usr/local/bin/git' # Use git from brew
alias g='git'
alias gbd='git branch -D'
alias ga='git add -A -v'
alias gau='git add -u -v'
alias gs='git status'
alias gpf='git push --force-with-lease'
alias gd='git diff'
alias gdc='git diff --cached'
alias gca='git commit --amend --no-edit -v'
alias gc='git commit'
alias gcf='git fixup'
alias gcm='git commit -m'
alias gch='git checkout'
alias gr='git restore'
alias gw='git switch'
alias gwc='gw -c'
alias gp='git push'
alias gpl='git pull'
alias gpu='git push --set-upstream origin $(git_current_branch)'
alias gl='git log --graph --color'
alias gfo='git fetch origin'
alias grom='gfo && git rebase origin/master'
alias gfu='git fetch upstream'
alias gri='git rebase -i'
alias grc='git rebase --continue'
alias gst='git stash'
alias gstp='git stash pop'
alias gstd='git stash drop'
alias gprl='git log --pretty=format:"### %s %n %n %b" --reverse origin/master..HEAD | pbcopy'
# Delete all the git branches except master
function git::clean () {
  git checkout master > /dev/null 2>&1
  for b in $(git branch) ; do
    if [[ "${b}" != '*' && "${b}" != "master" ]] ; then
      echo "Deleting ${b}"
      git branch -D $b
    fi
  done
}

# REVIEW_BASE is used by the aliases set in .gitconfig, by default
# is set to master. To review changes made by the last commit of this
# branch set it to:
# REVIEW_BASE=HEAD^ git stat
export REVIEW_BASE=master

# Kubernetes
alias k='kubectl'
source "/usr/local/opt/kube-ps1/share/kube-ps1.sh"
alias k9s='TERM=xterm k9s'
alias helm-delete-all="helm delete \$(helm list | awk  '{ print \$1 }' | tail -n +2)"
alias helm2="/usr/local/opt/helm@2/bin/helm"
export PATH="${PATH}:${HOME}/.krew/bin"

# Fix minikube date
alias minikube-date='DSTR=$(date -u); minikube ssh "sudo date --set=\"$DSTR\""'
alias minikube-start='minikube start --kubernetes-version=v1.14.8 && minikube-date && adn::kubeon'
alias minikube-stop='minikube stop && adn::kubeoff'

# Use for git branch in theme
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git*' formats '%b'
precmd() {
    vcs_info
}

# vi mode timeout
export KEYTIMEOUT=1

# User configuration
alias vim='nvim'
alias nv="vim ~/dev/adn/notes -c 'cd ~/dev/adn/notes' '+:NV'"
export EDITOR="nvim"
export GPG_TTY=$(tty)

# Fix Delete Home and End on vi-mode
bindkey -a "^[[3~" delete-char
bindkey "^[[3~" delete-char
bindkey -a "^[[H" beginning-of-line
bindkey "^[[H" beginning-of-line
bindkey -a "^[[F" end-of-line
bindkey "^[[F" end-of-line
bindkey "^K" kill-line
# On tmux the keycodes change
bindkey -a "^[[1~" beginning-of-line
bindkey "^[[1~" beginning-of-line
bindkey -a "^[[4~" end-of-line
bindkey "^[[4~" end-of-line
bindkey '^E' autosuggest-accept

if [[ "$(uname)" == "Linux" ]]
then
  # Beginning search with arrow keys
  bindkey "^[OA" up-line-or-beginning-search
  bindkey "^[OB" down-line-or-beginning-search
  bindkey -a "^[OA" up-line-or-beginning-search

  bindkey "^[b" backward-word
  bindkey "^[[1;5D" backward-word
  bindkey -a "^[[1;5D" backward-word
  bindkey "^[f" forward-word
  bindkey "^[[1;5C" forward-word
  bindkey -a "^[[1;5C" forward-word
fi

# add texlive to PATH
export PATH="/usr/local/texlive/2016/bin/x86_64-linux:$PATH"

# Elixir & Erlang
export ERL_AFLAGS="-kernel shell_history enabled"
export KERL_BUILD_PLT=yes

# AWS
# FSI profile
# export AWS_PROFILE=fsi-provision
# export AWS_PROFILE=350830678660_NRAdmin
export AWS_PAGER=bat

# oh-my-zsh
source $ZSH/oh-my-zsh.sh

# Disable the forward-char autosuggest
ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(end-of-line)

# asdf version manager for elm elixir erlang
# https://gist.github.com/rubencaro/6a28138a40e629b06470
if [ -e $HOME/.asdf/asdf.sh ] ; then
  export PATH="${HOME}/.asdf/installs/haskell/8.4.4/bin:${PATH}"
fi
# Haskell
# https://github.com/haskell/haskell-ide-engine/issues/1158
export HIE_HOOGLE_DATABASE=/Users/adonascimento/dev/third_party/haskell-ide-engine/.stack-work/hoogle/x86_64-osx/lts-13.10/8.6.3/database.hoo

# Go
export GOPATH="$HOME/go"
export PATH="$HOME/go/bin:$PATH"

# Java
export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home
alias j8="export JAVA_HOME='/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home'; java -version"
alias j11="export JAVA_HOME='/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home'; java -version"
alias j17="export JAVA_HOME='/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home'; java -version"

export LANG=en_US.UTF-8

# ssh
export SSH_KEY_PATH="~/.ssh/id_rsa_adn"

# Python virtualenvs
# export VIRTUAL_ENV_DISABLE_PROMPT=1
# export WORKON_HOME=~/.virtualenvs
# export PROJECT_HOME=$HOME/Devel
# VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
# source /usr/local/bin/virtualenvwrapper.sh

# tmux italic support
# create the file xterm-256color-italic.terminfo with:
#
# xterm-256color-italic|xterm with 256 colors and italic,
#       sitm=\E[3m, ritm=\E[23m,
#               use=xterm-256color,
#
# tic xterm-256color-italic.terminfo
#
# For osx create tmux-256color.terminfo with:
#
# tmux-256color|tmux with 256 colors,
#   ritm=\E[23m, rmso=\E[27m, sitm=\E[3m, smso=\E[7m, Ms@,
#   khome=\E[1~, kend=\E[4~,
#   use=xterm-256color, use=screen-256color,
#
# For more info:
#
# https://medium.com/@dubistkomisch/how-to-actually-get-italics-and-true-colour-to-work-in-iterm-tmux-vim-9ebe55ebc2be
# export TERM=xterm-256color-italic
alias ssh="TERM=xterm ssh"
alias up="TERM=xterm up"
alias vagrant="TERM=xterm vagrant"

# Rust
export PATH="$HOME/.cargo/bin:$PATH"

# added by travis gem
[ -f /home/adn/.travis/travis.sh ] && source /home/adn/.travis/travis.sh

# --files: Print each file that would be searched without actually performing the search.
# --no-ignore: Do not respect .gitignore, etc...
# --hidden: Search hidden files and folders
# --follow: Follow symlinks
# --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'

# Setup fzf
# ---------

# Auto-completion
# ---------------
[[ $- == *i* ]] && source "/usr/local/opt/fzf/shell/completion.zsh" 2> /dev/null

# Key bindings
# ------------
local fzfKeybindingFiles=(
  /usr/local/opt/fzf/shell/key-bindings.zsh
  /usr/share/fzf/shell/key-bindings.zsh
)
for keyBindingFile in ${fzfKeybindingFiles} ; do
  if [[ -f $keyBindingFile ]] ; then
    source $keyBindingFile
  fi
done

if [ -e /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ] ; then
  source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [ -e /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ] ; then
  source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

if command -v bat >/dev/null 2>&1 ; then
  alias cat='bat'
fi

if command -v exa >/dev/null 2>&1 ; then
  alias ls='exa -bla --git'
else
  alias ls='ls -al'
fi

if command -v gsed >/dev/null 2>&1 ; then
  alias sed=gsed
fi

qq() {
  clear

  logpath="$TMPDIR/q"
  if [[ -z "$TMPDIR" ]]; then
    logpath="/tmp/q"
  fi

  if [[ ! -f "$logpath" ]]; then
    echo 'Q LOG' > "$logpath"
  fi

  tail -100f -- "$logpath"
}

rmqq() {
  logpath="$TMPDIR/q"
  if [[ -z "$TMPDIR" ]]; then
    logpath="/tmp/q"
  fi
  if [[ -f "$logpath" ]]; then
    rm "$logpath"
  fi
  qq
}

docker::cleanup(){
    docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
    docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

function guid {
  _l=$((${#1} % 4))
  if [ $_l -eq 2 ]; then _s="$1"'=='
  elif [ $_l -eq 3 ]; then _s="$1"'='
  else _s="$1" ; fi
  echo "$_s" | tr '_-' '/+' | openssl enc -d -a -A
}

export MANPAGER="nvim +Man\!"

# NewRelic
alias nr="cd ~/dev/new_relic/"
export GOPRIVATE=*.datanerd.us

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/adonascimento/dev/third_party/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/adonascimento/dev/third_party/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/adonascimento/dev/third_party/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/adonascimento/dev/third_party/google-cloud-sdk/completion.zsh.inc'; fi

source /Users/adonascimento/Library/Preferences/org.dystroy.broot/launcher/bash/br

# added by travis gem
[ ! -s /Users/adonascimento/.travis/travis.sh ] || source /Users/adonascimento/.travis/travis.sh

source /Users/adonascimento/Library/Application\ Support/org.dystroy.broot/launcher/bash/br
